swagger: '2.0'
info:
  description: |
    The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other CB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Community Brands IntegrationService.

    Most of these APIs will be implemented in CBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.

    <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b>
  version: 1.0.0
  title: Community Brands Integration Service APIs
  termsOfService: http://swagger.io/terms/
  contact:
    email: sobin@schoolspeak.com
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
  
# Added by API Auto Mocking Plugin
host: ec2-18-220-1-208.us-east-2.compute.amazonaws.com:9070
basePath: /cbis/1.0.0
schemes:
 - https
 - http

securityDefinitions:
  basicAuth:
    type: basic

# To apply Basic auth to the whole API:
security:
  - basicAuth: []
  
tags:
- name: Data Exchange
  description: APIs to Push data (Notification) to other products via CBIS
- name: Product Endpoints
  description: Endpoints that must be implemented by the product in-order to communicate with CBIS

paths:

# Query & Notification API

  /notifications/publish:
    post:
      tags: 
      - Data Exchange
      summary: Publish an event.
      description: Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
      operationId: publishEvent
      parameters: 
        - in: body
          name: PublishEventRequest
          schema:
            $ref: "#/definitions/PublishEventRequest"
      responses:
        200:
          description: CBIS published Event token
          schema:
              $ref: "#/definitions/MessageResult"   
  
  /notifications/acknowledge:
    post:
      tags: 
      - Data Exchange
      summary: Acknowledge an event notification.
      description: Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the CBIS and CBIS willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
      operationId: notificationAcknowledge
      parameters: 
        - in: body
          name: NotificationAcknowledgeRequest
          schema:
            $ref: "#/definitions/NotificationAcknowledgeRequest"
      responses:
        200:
          description: Notification has been acknowledged successfully
  
  # Product Endpoints

  /productBaseUrl/acknowledgeNotification:
    post:
      tags: 
      - Product Endpoints
      summary: Product endpoint to receive notification acknowledgement from CBIS
      description: Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
      operationId: ackNotificationRequest
      parameters: 
        - in: body
          name: AckNotification
          schema:
            $ref: "#/definitions/AckNotification"
      responses:
        200:
          description: Acknowledgment status from event subscriber
  
  /productBaseUrl/notification:
    post:
      tags: 
      - Product Endpoints
      summary: Product endpoint to receive the notifications for an event from CBIS
      description: The notification endpoint will be invoked by CBIS to facilitate Notification API. THis is the endpoint that CBIS will call when it has to notify a product about any event that has been published.
      operationId: productNotification
      parameters: 
        - in: body
          name: ProductNotificationRequest
          schema:
            $ref: "#/definitions/ProductNotificationRequest"
      responses:
        200:
          description: The product must return 200 OK to convey success to CBIS. A response of 200 OK will tell CBIS that the nootification was successful. Otherwise, it may attempt to retry notifications.
  
  /productBaseUrl/errorNotification:
    post:
      tags: 
      - Product Endpoints
      summary: Product endpoint to receive Error notifications from CBIS
      description: The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
      operationId: errorNotificationRequest
      parameters: 
        - in: body
          name: ErrorNotification
          schema:
            $ref: "#/definitions/ErrorNotificationRequest"
      responses:
        200:
          description: Error Notifications from CBIS             
    
# Descriptions of object schemas

definitions:

  PublishEventRequest:
    type: object
    properties:
      institutionId:
        type: string
        description: Local institution Id
        example: "3745747"
      cbInstitutionId:
        type: string
        description: CB Institution Id
        example: "uihw-23dcrc-3wdcdc"
      messageToken:
        type: string
        description: unique id generated for each publish request. Used to acknowledge the product about success/failure of request.
        example: "ew-rw-dfkjfjd"
      eventName:
        type: string
        description: Name of the published event
        example: "Student_Admitted"
      Payload:
        type: string
        description: Message to be publish
        example: "{'Student':{'cbUserId':'777333','admission':{'DateOfAdmission':'2018-01-26',....'}}}"
                 
  AckNotification:
    type: object
    properties:
      AcknowledgeTimestamp:
        type: string
        description: Acknowledgment time stamp in UTC
        example: "2018-02-13T13:45:30"
      RequestTimestamp:
        type: string
        description: Request processed time stamp in UTC
        example: "2018-02-14T13:45:30"
      EventToken:
        type: string
        description: Event token
        example: "kyw3-5cyh-332c"
      StatusCode:
        type: string
        description: Event token
        example: "200"
      StatusMessage:
        type: string
        description: successfully processed 
        example: "Enrollment successfully processed"    
  
  ErrorNotificationRequest:
    type: object
    properties:
      RequestTimestamp:
        type: string
        description: Request processed time stamp in UTC
        example: "2018-02-14T13:45:30"
      RequestId:
        type: string
        description: unique Id for a request
        example: "kyw3-5cyh-332c"
      StatusCode:
        type: string
        description: The status code
        example: "200"
      StatusMessage:
        type: array
        description: Array of error messages
        items:
          type: string
          example:
            - Internal Server Error
            - Object reference not set.
        
  ProductNotificationRequest:
    type: object
    description: The otification request that is delivered to the product endpoint when a notification is published by another product
    properties:
      institutionId:
        type: string
        description: Local institution id
        example: "437483"
      cbInstitutionId:
        type: string
        description: The Community Brands institution id
        example: 51001435
      eventName:
        type: string
        description: The name of the event against which the notification was published
        example: ""
      eventToken:
        type: string
        description: The unique token for the event. Use this token to acknowledge the event.
        example: "55242"
      messageType:
        type: string
        description: The name of the standard data type of the Payload
        example: "Student"
      acknowledgementRequired:
        type: boolean
        description: A value indicating whether the notifier has requested for acknowledgement or not
        example: true
      payload:
        type: string
        description: The serialized string of the actual data (standard data type) - MUST be same as the standard data type specified in the messageType field

  NotificationAcknowledgeRequest:
    type: object
    properties:      
      AcknowledgeTimestamp:
        type: string
        description: Acknowledgment time stamp in UTC
        example: "2018-02-13T13:45:30"
      RequestTimestamp:
        type: string
        description: Request processed time stamp in UTC
        example: "2018-02-14T13:45:30"
      EventToken:
        type: string
        description: Event token
        example: "77455"
      StatusCode:
        type: string
        description: Event token
        example: "200"
      StatusMessage:
        type: string
        description: successfully processed 
        example: "Admissions successfully processed in TADS" 
        
  ErrorResponse:
    type: object
    properties:
      code:
        type: string
        example: "ServiceNotProvided"
      message:
        type: string
        example: "This requested service is not provided"
      utcTimestamp:
        type: string
        example: "2012-04-21T18:25:43-05:00"
    required:
      - code
      - message
      - utcTimestamp
      
  MessageResult:
    type: object
    properties:
      message_id:
        type: string
        description: unique identifier for the message
      result_type:
        type: string
        example: "E_NOT_AUTHENTICATED"
      description:
        type: string
        description: human readable description of the error
      payload_results:
        type: string
        description: individual results for each record included in the original message. can be omitted if the result_type applies to all records in the original message
        
  
# Global parameters
parameters:
  ContentTypeHeaderParam:
    in: header
    name: "Content-Type"
    type: string
    required: true
    description: "The Content type."

# Descriptions of common responses          
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/ErrorResponse"
  Unauthorized:
    description: Authentication information is missing or invalid
    schema:
      $ref: "#/definitions/ErrorResponse"
  Conflict:
    description: Conflict. Another entity with the same name already exists
    schema:
      $ref: "#/definitions/ErrorResponse"