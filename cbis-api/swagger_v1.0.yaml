swagger: '2.0'
info:
  description: |
    The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other CB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Community Brands IntegrationService.

    Most of these APIs will be implemented in CBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.

    <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b>
  version: 1.0.0
  title: Community Brands Integration Service APIs
  termsOfService: http://swagger.io/terms/
  contact:
    email: sobin@schoolspeak.com
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
  
# Added by API Auto Mocking Plugin
host: ec2-18-220-1-208.us-east-2.compute.amazonaws.com:9070
basePath: /cbis/1.0.0
schemes:
 - https
 - http

securityDefinitions:
  basicAuth:
    type: basic

# To apply Basic auth to the whole API:
security:
  - basicAuth: []
  
tags:
- name: Data Exchange
  description: APIs to Push data (Notification) to other products via CBIS
- name: Product Endpoints
  description: Endpoints that must be implemented by the product in-order to communicate with CBIS

paths:

# Query & Notification API

  /notifications/publish:
    post:
      tags: 
      - Data Exchange
      summary: Publish an event.
      description: Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
      operationId: publishEvent
      parameters: 
        - in: body
          name: publishedMessage
          schema:
            $ref: "#/definitions/PublishedMessage"
      responses:
        200:
          description: An object of MessageResult
          schema:
              $ref: "#/definitions/MessageResult"
  
  # Product Endpoints
  /notification:
    post:
      tags: 
      - Product Endpoints
      summary: Product endpoint to receive notification acknowledgement from CBIS
      description: Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
      operationId: ackNotificationRequest
      parameters: 
        - in: body
          name: PublishedMessage
          schema:
            $ref: "#/definitions/PublishedMessage"
      responses:
        200:
          description: An object of MessageResult
          schema:
              $ref: "#/definitions/MessageResult"
  
  /notificationResult:
    post:
      tags: 
      - Product Endpoints
      summary: Product endpoint to receive the notifications for an event from CBIS
      description: The notification endpoint will be invoked by CBIS to facilitate Notification API. THis is the endpoint that CBIS will call when it has to notify a product about any event that has been published.
      operationId: productNotification
      parameters: 
        - in: body
          name: MessageResult
          schema:
            $ref: "#/definitions/MessageResult"
      responses:
        200:
          description: An object of MessageResult
          schema:
              $ref: "#/definitions/MessageResult"       
    
# Descriptions of object schemas

definitions:
  PublishedMessage:
    type: object
    properties:
      institutionId:
        type: string
        description: Product-specific institution Id
        example: "3745747"
      cbInstitutionId:
        type: string
        description: Global CB institution id – if this value is provided, we can avoid a lookup
        example: "e34bdf5d-15f5-4ed1-91f3-dafee07ff14a"
      eventName:
        type: string
        description: The name of the event that is to be published
        example: "Ravenna.ApplicantAdmitted"
      messageId:
        type: string
        description: unique id generated for each publish request. Used to acknowledge the product about success/failure of request.
        example: "424d0716-2ed9-4e7b-86f3-c58dab1ab348"
      payloadType:
        type: string
        description: the standard model name of the payload (validations, etc will be done against this)
        example: "Student"
      Payload:
        type: object
        description: The actual payload
        example: "{'Student':{'cbUserId':'777333','admission':{'DateOfAdmission':'2018-01-26',....'}}}"
                 
  
  MessageResult:
    type: object
    properties:
      messageId:
        type: string
        description: The messageId of the message whose result this is
        example: "424d0716-2ed9-4e7b-86f3-c58dab1ab348"
      resultType:
        type: string
        description: The type of the result – must be one  of the predefined types
        example: "E_DESTINATION_UNREACHABLE"
      description:
        type: string
        description: A description of the error
        example: "The delivery engine failed to pass the message to the downstream system"
      origin:
        type: string
        description: "The origin of the message result. Must be one of the following: (1)CBIS – if the result originated in CBIS (2)TADS – if result originated in tads"
        example: "CBIS.DeliveryHandler"
      payloadType:
        type: string
        description: The standard model name to which the payload refers to. For example, if the message contains the results of Student admission then the payloadType will be “Student” 
        example: "student"    
      resultsPayload:
        type: array
        description: An array of results 
        items:
          $ref: "#/definitions/ResultsPayload"
  
  ResultsPayload:
    type: object
    properties:
      id:
        type: string
        description: The id of the entity
        example: "99653"
      resultType:
        type: string
        description: One of the predefined result types
        example: "E_BAD_DATA"
      description:
        type: string
        description: Description of the error
        example: "The record could not be imported"

  
# Global parameters
parameters:
  ContentTypeHeaderParam:
    in: header
    name: "Content-Type"
    type: string
    required: true
    description: "The Content type."

