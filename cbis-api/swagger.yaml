swagger: '2.0'
info:
  description: |
    The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.

    Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.

    <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b>
  version: 1.0.0
  title: Education Brands Integration Service APIs
  termsOfService: http://swagger.io/terms/
  contact:
    email: sobin@schoolspeak.com
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
  
# Added by API Auto Mocking Plugin
host: ec2-18-220-1-208.us-east-2.compute.amazonaws.com:9070
basePath: /cbis/1.0.0
schemes:
 - https
 - http

securityDefinitions:
  basicAuth:
    type: basic

# To apply Basic auth to the whole API:
security:
  - basicAuth: []
  
tags:
- name: Product  
  description: APIs for registering products with EBIS
- name: Institution
  description: APIs for registering Institutions with EBIS
- name: Data Exchange
  description: APIs to Pull data (Query) and Push data (Notification) from/to other products via EBIS
- name: Product Endpoints
  description: Endpoints that must be implemented by the product in-order to communicate with EBIS

paths:

# Product APIs

  /products:
    get:
      tags: 
      - Product
      summary: Get list of EB products
      operationId: getProducts      
      responses:
        200:
          description: List of products registered with EBIS
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
      
    post:
      tags:
      - Product
      summary: Register a new product
      operationId: postProduct
      parameters:
        - in: body
          name: RegisterProductRequest
          schema:
            $ref: "#/definitions/Product"
      responses: 
        200:
          description: Product registered successfully with EBIS
          schema:
            $ref: "#/definitions/RegisterProductResponse"
  
  /products/{ebProductId}:    
    get:
      tags:
      - Product
      summary: Get a product by EB Id
      description: Gets the details of a product by its Ebucation Brands Id
      operationId: getProductById
      parameters:
        - in: path
          name: ebProductId
          description: "The Education brands product id"
          required: true
          type: string
      responses:
        200:
          description: "OK. The product details as registered with EBIS"
          schema: 
            $ref: "#/definitions/Product"  
        404:
          $ref: "#/responses/NotFound"
    
    put: 
      tags:
        - Product
      summary: Update a product by EB Id
      description: Updates the details of a product by its Ebucation Brands Id
      operationId: updateProductById
      parameters:
        - $ref: "#/parameters/ContentTypeHeaderParam"
        - in: path
          name: ebProductId
          description: "The Education brands product id"
          required: true
          type: string
        - in: body
          name: Product
          description: "The updated product object"
          required: true
          schema:
            $ref: "#/definitions/Product"
          
      responses:
        200:
          description: "OK. The product details as registered with EBIS"
          schema: 
            $ref: "#/definitions/Product"  
        404:
          $ref: "#/responses/NotFound"
    
    delete: 
      tags:
        - Product
      summary: De-register the product
      description: De-register the product by its Ebucation Brands Id
      operationId: deRegisterProductById
      parameters:
        - in: path
          name: ebProductId
          description: "The Education brands product id"
          required: true
          type: string
          
      responses:
        200:
          description: "OK. The product de-registered with EBIS"
        404:
          $ref: "#/responses/NotFound"

# Institution API

  /institutions:
    post:
      tags:
      - Institution
      summary: Register a new Institution for Integration
      description: Registeres a new institution for Integration. THis must be done before using the services of EBIS.
      operationId: registerInstitution
      parameters:
        - in: body
          name: RegisterInstitutionRequest
          schema:
            $ref: "#/definitions/RegisterInstitutionRequest"
      responses: 
        200:
          description: Institution registered successfully with EBIS
          schema:
            $ref: "#/definitions/RegisterInstitutionResponse"
        409:
          description: "Conflict. The institution has already been registered for integration"
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /institutions/{ebInstitutionId}/products:
    get:
      tags:
        - Institution
      summary: Get Services
      description: Gets a list of all services offered by different products for the specified institution
      operationId: getServicesRequest
      parameters:
        - in: path
          name: ebInstitutionId
          description: "The Education brands institution id"
          required: true
          type: string
      responses: 
         200:
          description: Successfully returned the services used by the institution
          schema:
            $ref: "#/definitions/GetServiceResponse"
  
  /institutions/{ebInstitutionId}/products/{ebProductId}:
    delete:
      tags:
        - Institution
      summary: Disable Integration for product
      description: API for an institution to disable integration for its product
      operationId: disableProductInstitutionIntegration
      parameters:
        - in: path
          name: ebInstitutionId
          description: "The Education brands institution id"
          required: true
          type: string
        - in: path
          name: ebProductId
          description: "The Education brands product id"
          required: true
          type: string
      responses: 
         200:
          description: Successfully disabled integration for the product            

# Query & Notification API

  /query:
    post:
      tags:
      - Data Exchange
      summary: Query for data
      description: The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
      operationId: getQueryRequest
      parameters:
        - in: body
          name: GetQueryRequest
          schema:
            $ref: "#/definitions/GetQueryRequest"
      responses: 
         200:
          description: Successfully returned the data.
          schema:
            $ref: "#/definitions/GetQueryResponse"
  
  /notifications/publish:
    post:
      tags: 
      - Data Exchange
      summary: Publish an event.
      description: Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
      operationId: publishEvent
      parameters: 
        - in: body
          name: PublishEventRequest
          schema:
            $ref: "#/definitions/PublishEventRequest"
      responses:
        200:
          description: EBIS published Event token
          schema:
              $ref: "#/definitions/PublishEventResponse"   
  
  /notifications/acknowledge:
    post:
      tags: 
      - Data Exchange
      summary: Acknowledge an event notification.
      description: Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
      operationId: notificationAcknowledge
      parameters: 
        - in: body
          name: NotificationAcknowledgeRequest
          schema:
            $ref: "#/definitions/NotificationAcknowledgeRequest"
      responses:
        200:
          description: Notification has been acknowledged successfully
  
  /notifications/subscribe:
    post:
      tags: 
      - Data Exchange
      summary: Subscribe to a published event
      description: Inorder to get the notifications for an event, the product has to subscribe for that event.
      operationId: subscribeNotificationEvent
      parameters: 
        - in: body
          name: SubscribeEventRequest
          schema:
            $ref: "#/definitions/SubscribeEventRequest"
      responses:
        200:
          description: Eb Event Subscription Id
          schema:
            $ref: "#/definitions/SubscribeEventResponse"               
  
  # Product Endpoints

  /productBaseUrl/acknowledgeNotification:
    post:
      tags: 
      - Product Endpoints
      summary: Product endpoint to receive notification acknowledgement from EBIS
      description: Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
      operationId: ackNotificationRequest
      parameters: 
        - in: body
          name: AckNotification
          schema:
            $ref: "#/definitions/AckNotification"
      responses:
        200:
          description: Acknowledgment status from event subscriber
  
  /productBaseUrl/notification:
    post:
      tags: 
      - Product Endpoints
      summary: Product endpoint to receive the notifications for an event from EBIS
      description: The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
      operationId: productNotification
      parameters: 
        - in: body
          name: ProductNotificationRequest
          schema:
            $ref: "#/definitions/ProductNotificationRequest"
      responses:
        200:
          description: The product must return 200 OK to convey success to EBIS. A response of 200 OK will tell EBIS that the nootification was successful. Otherwise, it may attempt to retry notifications.
  
  /productBaseUrl/query:
    post:
      tags:
      - Product Endpoints
      summary: Product endpoint to receive Query requests from EBIS
      description: Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously. 
      operationId: getDataQueryRequest
      parameters:
        - in: body
          name: GetQueryRequest
          schema:
            $ref: "#/definitions/GetQueryRequest"
      responses: 
         200:
          description: Successfully returned the data.
          schema:
            $ref: "#/definitions/GetQueryResponse"
  
  /productBaseUrl/errorNotification:
    post:
      tags: 
      - Product Endpoints
      summary: Product endpoint to receive Error notifications from EBIS
      description: The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
      operationId: errorNotificationRequest
      parameters: 
        - in: body
          name: ErrorNotification
          schema:
            $ref: "#/definitions/ErrorNotificationRequest"
      responses:
        200:
          description: Error Notifications from EBIS             
    
# Descriptions of object schemas

definitions:
  ErrorResponse:
    type: object
    properties:
      code:
        type: string
        example: "ServiceNotProvided"
      message:
        type: string
        example: "This requested service is not provided"
      utcTimestamp:
        type: string
        example: "2012-04-21T18:25:43-05:00"
    required:
      - code
      - message
      - utcTimestamp
  
  SubscribeEventRequest:
    type: object
    properties:
      ebProductID:
        type: string
        description: EBID of the product the requesting product
        example: "xxui-23jy-34dte"
      productName:
        type: string
        description: Name of the product
        example: "TADS"
      ebInstitutionId:
        type: string
        description: EB Institution Id
        example: "uihw-23dcrc-3wdcdc"
      institutionName:
        type: string
        description: Institution Name
        example: "Donahue"
      eventName:
        type: string
        description: Name of the published event
        example: "StudentAdmitted"
      protocol:
        type: string
        description: Http protocol used
        example: "http"
      filterPolicy:
          $ref: "#/definitions/FilterPolicy"
            
  SubscribeEventResponse:
    type: object
    properties:
      EbEventSubscriptionId:
        type: string
        description: Eb Event Subscription Id
        example: "xxui-23jy-34dte"    
  
  PublishEventRequest:
    type: object
    properties:
      ebProductID:
        type: string
        description: EBID of the product
        example: "xxui-23jy-34dte"
      productName:
        type: string
        description: Name of the product
        example: "TADS"
      ebInstitutionId:
        type: string
        description: EB Institution Id
        example: "uihw-23dcrc-3wdcdc"
      institutionName:
        type: string
        description: Institution Name
        example: "Donahue"
      eventName:
        type: string
        description: Name of the published event
        example: "Student_Admitted"
      acknowledgementRequired:
        type: boolean
        description: Is acknowledgement required
        example: true
      Payload:
        type: string
        description: Message to be publish
        example: "{'Student':{'EbUserId':'777333','Admission':{'DateOfAdmission':'2018-01-26',....'}}}"
                 
  PublishEventResponse:
    type: object
    properties:
      ebPublishedEventId:
        type: string
        description: EBID of the event published
        example: "yyui-23jy-34dte"  
  
  AckNotification:
    type: object
    properties:
      AcknowledgeTimestamp:
        type: string
        description: Acknowledgment time stamp in UTC
        example: "2018-02-13T13:45:30"
      RequestTimestamp:
        type: string
        description: Request processed time stamp in UTC
        example: "2018-02-14T13:45:30"
      EventToken:
        type: string
        description: Event token
        example: "kyw3-5cyh-332c"
      StatusCode:
        type: string
        description: Event token
        example: "200"
      StatusMessage:
        type: string
        description: successfully processed 
        example: "Enrollment successfully processed"    
  
  GetQueryResponse:
    type: array
    items:
      $ref: "#/definitions/QueryPayload"
      
  QueryPayload:
   type: object
   properties:
      EBIntegrationUserId:
        type: string
        description: Education Brands User Id
        example: "Ravenna"
      FirstName:
        type: string
        description: User First Name
        example: "John"
      LastName:
        type: string
        description: User Last Name
        example: "Paul"
      Gender:
        type: string
        example: "M"
        description: User Gender
      Admission:
        type: array
        items:
          $ref: "#/definitions/QueryInformation"
  
  ErrorNotificationRequest:
    type: object
    properties:
      productID:
        type: string
        description: EBID of the product
        example: "xxui-23jy-34dte"
      productName:
        type: string
        description: Name of the product
        example: "TADS"
      RequestTimestamp:
        type: string
        description: Request processed time stamp in UTC
        example: "2018-02-14T13:45:30"
      RequestId:
        type: string
        description: unique Id for a request
        example: "kyw3-5cyh-332c"
      StatusCode:
        type: string
        description: The status code
        example: "200"
      StatusMessage:
        type: array
        description: Array of error messages
        items:
          type: string
          example:
            - Internal Server Error
            - Object reference not set.
  
  QueryInformation:
    type: object
    properties:
      ApplicationId:
        type: string
        description: Admission Application Id
        example: "1000021"
      AdmissionStatus:
        type: string
        description: Status of the admission
        example: "Applied"
  
  GetQueryRequest:
    type: object
    properties:
      productName:
        type: string
        description: Name of the Product
        example: "Ravenna"
      ebProductId:
        type: string
        description: Education brands Id for the product
        example: "03"
      institutionName:
        type: string
        description: Name of the institution
        example: "SchoolSpeak Training Academy"
      ebInstitutionId:
        type: string
        description: Name of the institution
        example: "SchoolSpeak Training Academy"
      RecordType:
        type: string
        example: "Student"
        description: The name of the Standard Data Set type to be queried
      
      sections:
        type: array
        description: The sections of the standard data set to populate in the result 
        items:
          type: string
          example:
            - Student.All
            - Student.Basic_Info
            - Student.Admission
      filters:
        type: array
        description: Array of conditions to filter the result data
        items:
          $ref: "#/definitions/Filters"
          
  Filters:
    type: object
    properties:
      Key:
        type: string
        description: Admission Status
        example: "Admission-Status"
      Value:
        type: string
        description: Admission Status
        example: "Applied"
        
  GetServiceResponse:
    type: object
    properties:
      EBInstitutionId:
        type: string
        description: Institution Id
        example: "10002"
      Services:
        type: array
        description: Array of services supported by the integration service
        items:
          $ref: "#/definitions/ProductServices"
          
  Product:
    type: object
    properties:
      productName:
        type: string
        description: Name of the product
        example: "Senior Systems"
      servicesOffered:
        type: array
        description: Array of services offered by the product, collection of Education Brands service ids
        items:
          type: string
          example:
            - A
            - E
            - SIS
            - TM
            - FA
            - ADV
            
  RegisterInstitutionResponse:
    type: object
    properties:
      EBInstitutionId:
        type: string
        description: Education Brands InstitutionId
        example: "100001"
      Services:
        type: array
        items:
          $ref: "#/definitions/ProductServices"
          
  RegisterInstitutionRequest:
    type: object
    properties:
      productName:
        type: string
        description: Name of the Product
        example: "Ravenna"
      productId:
        type: string
        description: Education brands Id for the product
        example: "03"
      institutionName:
        type: string
        description: Name of the institution
        example: "SchoolSpeak Training Academy"
      InstitutionId:
        type: string
        example: "2001"
        description: The local product-specific id of the institution
      Address:
        type: array
        items:
          $ref: "#/definitions/Address"
      phone:
        type: string
        description: "the phone number of the insttution"
        example: "877 773 2513"
      webAddress:
        type: string
        description: The website address of the institution
        example: "http://www.SchoolSpeak.com"
      serviceOffered:
        type: array
        description: A list of services offered  by the product
        items:
          type: string
          example:
            - Admission
          
  Address:
    type: object
    properties:
      addressLine1:
        type: string
        description: "the address line 1 of the institution"
        example: "1250 Oakmead Pkwy"
      addressLine2:
        type: string
        description: "the address line 2 of the institution"
        example: "Suite 210"
      city:
        type: string
        description: "the city of the institution"
        example: "Sunnywale"
      state:
        type: string
        description: "the state of the institution"
        example: "CA"
      zip:
        type: string
        description: "the zip of the institution"
        example: "94085"
      country:
        type: string
        description: "the country of the institution"
        example: "USA" 
        
  ProductServices:
    type: object
    properties:
      EBProductId:
        type: string
        description: The Education Brands product Id
        example: "7756c3c-22c2-41d9-b1d9-27444586011"
      ProductName:
        type: string
        description: The product Name
        example: "TADS"
        
      servicesOffered:
        type: array
        description: A list of services of the product
        items:
          type: string
          example:
            - Enrollment
            - Tuition Management
            
  FilterPolicy:
    type: object
    description: A filter policy to be applied
    properties:
      key:
        type: string
        description: A key for this policy
        example: StandardDataType
      values:
        type: array
        description: A list of values to match
        items:
          type: string
          example: 
            - "Student.Basic_Info"
            - "Student.Admission"
  
  ProductNotificationRequest:
    type: object
    description: The otification request that is delivered to the product endpoint when a notification is published by another product
    properties:
      publishingProductName:
        type: string
        description: The name of the product that published the notification
        example: Ravenna
      institutionName:
        type: string
        description: The name of the institution
        example: Summerwood School
      ebInstitutionId:
        type: string
        description: The Education Brands institution id
        example: 51001435
      eventName:
        type: string
        description: The name of the event against which the notification was published
        example: ""
      eventToken:
        type: string
        description: The unique token for the event. Use this token to acknowledge the event.
        example: "55242"
      messageType:
        type: string
        description: The name of the standard data type of the Payload
        example: "Student"
      acknowledgementRequired:
        type: boolean
        description: A value indicating whether the notifier has requested for acknowledgement or not
        example: true
      payload:
        type: string
        description: The serialized string of the actual data (standard data type) - MUST be same as the standard data type specified in the messageType field

  NotificationAcknowledgeRequest:
    type: object
    properties:      
      AcknowledgeTimestamp:
        type: string
        description: Acknowledgment time stamp in UTC
        example: "2018-02-13T13:45:30"
      RequestTimestamp:
        type: string
        description: Request processed time stamp in UTC
        example: "2018-02-14T13:45:30"
      EventToken:
        type: string
        description: Event token
        example: "77455"
      StatusCode:
        type: string
        description: Event token
        example: "200"
      StatusMessage:
        type: string
        description: successfully processed 
        example: "Admissions successfully processed in TADS" 
        
  RegisterProductResponse:
    type: object
    properties:
      ebProductId:
        type: string
        description: The Education brands product id
        example: "3456dc3c-22c2-41c9-b1d9-8455f4660111"
        
    
# Global parameters
parameters:
  ContentTypeHeaderParam:
    in: header
    name: "Content-Type"
    type: string
    required: true
    description: "The Content type."

# Descriptions of common responses          
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/ErrorResponse"
  Unauthorized:
    description: Authentication information is missing or invalid
    schema:
      $ref: "#/definitions/ErrorResponse"
  Conflict:
    description: Conflict. Another entity with the same name already exists
    schema:
      $ref: "#/definitions/ErrorResponse"